import openpyxl
from docx import Document
from collections import defaultdict
from datetime import datetime
from docx.shared import Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.enum.text import WD_UNDERLINE
n = datetime.now()
d = n.strftime("%d")
m = n.strftime("%m")
y = n.strftime("%y")
oati_count = caf_count = tot = c = 0
max_list2 = []
fin = []
accel = []
add_dict = {}
imprint = []
head_cur = []
single = []
di = {}
f = {'Разруш.АБП, плитка, просадка': 'Аварийное разрушение плиточного покрытия'},{'Не убран двор, ДП и СП, подтопление, БРТС': 'Брошенное, разукомплектованное транспортное средство на территории'},{'неуд.содержание МАФ и ограждений': 'Грязная опора освещения'},{'неуд.содержание МАФ и ограждений': 'Грязные дорожные знаки, информационные щиты, указатели'},{'неуд.содержание МАФ и ограждений': 'Грязный МАФ'},{'неуд.содержание МАФ и ограждений': 'Загрязнен дорожный знак, информационный указатель'},{'содержание КП,БП, переполнена урна': 'Навал мусора на бункерной площадке'},{'содержание КП,БП, переполнена урна': 'Навал мусора на контейнерной площадке'},{'сломан ИДН': 'Нарушена целостность искусственной дорожной неровности'},{'содержание КП,БП, переполнена урна': 'Не окрашен павильон контейнерной/бункерной площадки'},{'неуд.содержание МАФ и ограждений': 'Не окрашен МАФ'},{'неуд.содержание МАФ и ограждений': 'Не очищен от снега и наледи МАФ'},{'Не убран ОДХ,подтопление': 'Не очищен от снега и наледи объект дорожного хозяйства'},{'Не убран двор, ДП и СП, подтопление, БРТС': 'Не очищено твердое покрытие: а/6, плиточное покрытие от наледи и снега'},{'Не убран ОДХ,подтопление': 'Не убран объект дорожного хозяйства'},{'содержание КП,БП, переполнена урна': 'Не убрана бункерная площадка'},{'Не убран двор, ДП и СП, подтопление, БРТС': 'Не убрана дворовая территория'},{'содержание КП,БП, переполнена урна': 'Не убрана контейнерная площадка'},{'Отсутствие трав.покрова на газоне, содержания цветника, сухостой, непокос': 'Неудовлетворительное содержание газона (непокос)'},{'содержание КП,БП, переполнена урна': 'Неудовлетворительное содержание павильона контейнерной/бункерной площадки'},{'Отсутствие трав.покрова на газоне, содержания цветника, сухостой, непокос': 'Отсутствие травяного покрова на газоне'},{'Отсутствует/поврежден борт.камень': 'Отсутствует/ловрежден бортовой камень'},{'содержание КП,БП, переполнена урна': 'Переполнен бункер-накопитель'},{'содержание КП,БП, переполнена урна': 'Переполнен контейнер'},{'Не убран двор, ДП и СП, подтопление, БРТС': 'Переполнена урна'},{'Пни, упавшие деревья': 'Пни на дворовой территории'},{'неуд.содержание МАФ и ограждений': 'Повреждена урна'},{'неуд.содержание МАФ и ограждений': 'Повреждено ограждение'},{'Не убран двор, ДП и СП, подтопление, БРТС': 'Подтопление территории'},{'содержание КП,БП, переполнена урна': 'Размещение контейнера вне отведенного для этого места либо с нарушением СанПиН'},{'Разруш.покр. из резин.крошки': 'Разрушено покрытие из резиновой крошки'},{'Не убран двор, ДП и СП, подтопление, БРТС': 'Складирование скола асфальта'},{'неуд.содержание МАФ и ограждений': 'Сломан дорожный знак, информационный указатель'},{'неуд.содержание МАФ и ограждений': 'Сломан МАФ'},{'неуд.содержание МАФ и ограждений': 'Сломан МАФ (нарушение норм безопасности)'},{'Стертая дорожн.разметка': 'Стертая дорожная разметка'},{'Разруш.АБП, плитка, просадка': 'Ямы и выбоины в асфальтобетонном покрытии'}
for i in f:
    i = {v:k for k, v in i.items()}
    di.update(i)

if int(d[1])<=7 and int(d[0]) == 0:
    d2 = 30+int(d[1]) - 7
    m2 = m[0]+str(int(m[1]) - 1)
else:
    d2 = int(d)-7
    m2 = m
# Открываем файл Excel
workbook = openpyxl.load_workbook('3.xlsx')
sheet = workbook.active

# Создаем словарь для хранения количества
count_dict = {}
count_dict2 = {}

# Итерируемся по строкам и считаем количество значений в колонке F, соответствующих значениям в колонке B
for row in sheet.iter_rows(values_only=True):
    value_f = row[5]  # Индекс колонки F (нумерация начинается с 0)
    value_b = row[1]  # Индекс колонки B
    value_k = row[6] # Индекс колонки object element
    value_d = row[12] # Индекс колонки date
    value_ad = row[29] # Индекс колонки object address
    value_t = row[45] # Индекс статуса disturbance
    value_c = row[2] # Индекс колонки control

    if value_b == 'ЦАФАП' and value_c == 'На контроле':
        vala = [value_c,value_ad,value_t,value_f,value_b]
        max_list2.append(vala)
        caf_count += 1
        if value_f in count_dict:
            count_dict[value_f] += 1
        else:
            count_dict[value_f] = 1
    if value_b == 'ОАТИ' and value_c == 'На контроле':
        vala2 = [value_c,value_ad,value_t,value_f,value_b]
        max_list2.append(vala2)
        oati_count += 1
        if value_f in count_dict2:
            count_dict2[value_f] += 1
        else:
            count_dict2[value_f] = 1


row_count = caf_count+oati_count
# Создаем новый документ Word
doc = Document()
style = doc.styles['Normal']
font = style.font
font.name = 'TimesNewRoman'
font.size = Pt(12)
e = doc.add_paragraph('')
en = e.add_run("Справка к повестке заседания окружного Штаба по вопросам жилищно-коммунального хозяйства и благоустройства \n \n")
en.font.bold = True
ent = e.add_run("Вопрос №3 \n \n")
ent.font.bold = True
ent.font.underline = WD_UNDERLINE.SINGLE
run = e.add_run(f"О нарушениях, поступивших за истекший период в ЦАФАП ГБУ «Жилищник района Теплый Стан» {d2}.{m2}.{y} г. - {d}.{m}.{y} г. в статусе «на контроле», «не устранено»")


head = doc.add_paragraph(f"Всего на контроле {row_count} нарушений.")
head_1  = head.add_run(f"\n Выявлено ОАТИ - {oati_count} нарушений \n Выявлено ЦАФАП - {caf_count} нарушений \n \n")
head_1.font.bold = True
head_2 = head.add_run("В том числе по тематикам:")
head_2.font.underline = WD_UNDERLINE.SINGLE

dd = defaultdict(list)
for key in set(list(count_dict.keys())+list(count_dict2.keys())):
    if key in count_dict:
        dd[key].append(str(count_dict[key]))
        dd[key].append(" ЦАФАП ")
    if key in count_dict2:
        dd[key].append(str(count_dict2[key]))
        dd[key].append(" ОАТИ")

for value_f, count in dd.items():
    count1 = count
    c == True
    tot = 0
    for key in di:
        if value_f == key:
            for j in range(len(count)):
                    if count[j].isdigit():
                        tot += int(count[j])
            count = ''.join(count)
            heady = doc.add_paragraph('')
            line = heady.add_run(f"{di[key]} - {count}, {tot} нарушений")
            line.font.bold = True
            for i in max_list2:
                if key == i[3]:
                    line2 = f"{i[1]} \n{i[0]},\t(Находится {str(i[2]).lower()}), ({i[4]}))"
                    
                    paragraph=doc.add_paragraph(line2)
                    p_fmt = paragraph.paragraph_format
                    p_fmt.left_indent = Pt(30)

doc.save('output.docx')

print("Документ успешно создан!")
